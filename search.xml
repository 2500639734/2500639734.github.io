<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Git版本管理工具使用]]></title>
    <url>%2F2019%2F02%2F22%2FGit%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[配置用户信息git config --global user.name &quot;Your Name&quot;git config --global user.email &quot;email@example.com&quot; 创建版本库git init 添加文件到仓库git add readme.txt 提交文件到仓库git commit -m &quot;wrote a readme file&quot; 查看仓库当前状态git status 查看对文件所做的修改git diff readme.txt 查看提交历史git loggit log --pretty=oneline 回退到历史版本git reset --hard HEAD^git reset --hard HEAD^^git reset --hard HEAD^^^git reset --hard HEAD~100git reset --hard b4982cd 查看历史命令git reflog 查看工作区版本和版本库最新版本的区别git diff HEAD -- readme.txt 撤销工作区修改,回退到最近一次add或commit时的状态git checkout -- readme.txt 撤销暂存区修改git reset HEAD readme.txt 删除文件git rm 创建SSH Keyssh-keygen -t rsa -C &quot;youremail@example.com&quot; ssh方式添加远程仓库git remote add origin git@github.com:2500639734/learngit.git 推送指定分支到远程仓库同时关联本地和远程分支,第一次git push -u origin master 推送指定分支到远程仓库git push origin master ssh方式克隆远程仓库git clone &quot;your respoitory address&quot; 提交过程-》 add加入文件到暂存区 -》 commit -》 暂存区文件提交到本地仓库 -》 push 本地仓库文件推送到远程仓库 创建dev分支git branch dev 切换到dev分支git checkouu dev 创建并切换到dev分支git checkout -b dev 查看当前分支git branch dev分支合并到当前分支git merge dev 合并分支禁用Fast forward模式git merge --no-ff -m &quot;merge with no-ff&quot; dev 删除dev分支git branch -d dev 删除未合并的分支git branch -D feature 查看分支图git log --graph 查看分支图简要git log --graph --pretty=oneline --abbrev-commit 解决冲突手动修改合并失败的文件 -》 提交 -》 合并 -》 删除分支 储存当前工作区并在当前分支下创建临时分支git stashgit checkout -b issue-101 查看储存的工作区git stash list 恢复储存的工作区git stash apply 删除储存的工作区git stash drop 恢复并删除储存的工作区git stash pop 查看远程仓库信息git remote 查看远程仓库详细信息git remote -v 推送本地master分支到远程仓库,远程仓库默认名称origin,没有权限则不显示地址git push origin master 克隆远程仓库的dev分支到本地git checkout -b dev origin/dev 推送本地dev分支的修改到远程仓库git push origin dev 合并远程仓库dev分支git branch --set-upstream-to=origin/dev devgit pull 多人协作流程推送本地修改 git push origin &lt;branch-name&gt; -》 推送失败尝试合并 git pull -》 合并冲突则解决冲突,并在本地提交 -》 git push origin &lt;branch-name&gt;再次推送git pull提示no tracking information,则说明本地分支和远程分支的链接关系没有创建,用命令git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt; 本地未push的分叉提交历史整理成直线git rebase 当前分支打上标签git tag v1.0 查看标签git tag 查看标签信息git show v1.0 当前分支历史提交记录打上标签git tag v0.9 f52c633 删除本地标签git tag -d v0.9 推送v1.0标签到远程仓库git push origin v1.0 一次性推送尚未推送到远程仓库的标签git push origin --tags 删除远程仓库标签git tag -d v0.9git push origin :refs/tags/v0.9 git终端显示颜色git config --global color.ui true 忽略文件,根目录加入.gitignore文件配置.gitignore 检查.gitignore文件是否正确git check-ignore 强制添加已设定被忽略的文件git add -f App.class 配置命令别名git config --global alias.st statusgit config --global alias.co checkoutgit config --global alias.ci commitgit config --global alias.br branchgit config --global alias.unstage &#39;reset HEAD&#39;git config --global alias.last &#39;log -1&#39;git config --global alias.lg &quot;log --color --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit&quot; 删除配置的别名git仓库配置在.git/config文件中,删除[alias]下配置的别名当前用户git目录在用户主目录下的一个隐藏文件.gitconfig中,删除[alias]下配置的别名 搭建git服务器1.准备一台linux服务器,拥有sudo权限的账号2.sudo apt-get install git 安装git3.sudo adduser git 创建一个git用户,用来运行git服务4.收集所有需要登录的用户的公钥,就是他们自己的id_rsa.pub文件,把所有公钥导入到/home/git/.ssh/authorized_keys文件里,一行一个,如果没有authorized_keys文件直接创建一个5.sudo git init --bare sample.git 初始化git仓库,先选定一个目录作为仓库,然后在该目录下执行这个命令,服务器上git仓库以.git结尾,并且纯粹只是为了共享,只是个裸仓库没有工作区6.编辑/etc/passwd文件,把git:x:1001:1001:,,,:/home/git:/bin/bash改为git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell,这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出7.git clone git@server:/srv/sample.git在本地克隆远程仓库,这里假设远程仓库路径是/srv/sample.git8.正常流程开发,提交9.如果团队人员过多,添加公匙费劲,可以用Gitosis来管理公钥,如果要做权限控制,也可以用Gitosis]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LinuxShell脚本编程]]></title>
    <url>%2F2018%2F12%2F26%2FLinuxShell%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[例子 .sh后缀的文件,以#!/bin/bash开头 编辑脚本vim /home/helloworld.sh123#!/bin/bash# 终端输出hello worldecho "hello world" chmod 777 /home/helloworld.sh附加执行权限sh /home/helloworld.sh执行(终端打印hello world) 执行方式 ./hellowrold.sh相对路径执行 /home/helloworld.sh绝对路径执行 sh /home/helloworld.sh sh命令执行 bash /home/helloworld.sh bash命令执行 语法变量 系统变量 set显示当前系统的所有变量 echo $HOME输出系统变量HOME(当前用户根目录) 自定义变量 变量定义规则 变量名称可以由字母、数字、下划线组成,但不能以数字开头 等号两侧不能由空格 变量名称一般习惯为大写 双引号和单引号由区别,双引号仅将空格脱意,单引号会将所有特殊字符脱意 定义变量 SS=hello定义自定义变量SS,值为hello echo $SS输出自定义变量SS unset SS撤销自定义变量SS readonly SS=hello定义静态变量SS,值为hello(静态变量不可修改,只能注销或重启后撤销) export SS把变量SS提升为全局变量,可供其他shell程序使用 将命令的返回值赋给变量 A=ls -la反引号,运行里面的命令,并把结果返回给变量A A=$(ls -la)等价于反引号,运行里面的命令,并把结果返回给变量A 设置环境变量 export 变量名=变量值设置环境变量的值,全局都可以使用 source 配置文件让修改后的值立即生效 echo $变量名查询环境变量的值 位置参数变量 $n n为数字,$0代表命令本身,$1-$9代表第1-9个参数,十以上的参数用大括号包含${10} $*代表命令行中所有参数,$*把所有参数看成一个整体 $@代表命令行中所有参数,$@把每个参数区分对待 $#代表命令行中所有参数的个数 例子:vim /home/echoParams.sh,保存后授权:chmod 777 /home/echoParams.sh,执行/home/echoParams.sh param1 param21234567891011#!/bin/bash# 输出第一个参数echo "$1"# 输出第二个参数echo "$2"# 输出所有参数echo "$*"# 输出所有参数echo "$@"# 输出所有参数的个数echo "$#" 系统进程变量 $$获取当前进程的进程号(pid) $!获取后台运行的最后一个进程的进程号(pid) $?获取最后一次执行的命令的返回状态 0:命令正确执行 非0:命令执行不正确(除了0其它数字由命令自己决定) 例子:vim /home/echoPids.sh,保存后授权:chmod 777 /home/echoPids.sh,执行/home/echoPids.sh12345678#!/bin/bash# 输出获取当前进程的进程号echo "$$"# 输出后台运行的最后一个进程的进程号/home/echoParams.sh param1 param2 &amp;echo "$!"# 输出最后一次执行的命令的返回状态(0代表正确执行,非0代表没有正确执行)echo "$?" 运算符 命令运算命令需要用` `符号包裹 $((运算式))或$[运算式] expr m+n(expr运算符之间要有空格) /*乘,/除,%取余(expr运算符需要加/符号)条件判断 [condition]条件(前后要有空格) [condition]返回true []返回false [condition]&amp;&amp;echo OK||echo netok条件满足,执行后面的语句 =字符串比较,-lt小于,-le小于等于,-eq等于,-gt大于,-ge大于等于,-ne不等于(整数比较) -r有读的权限,-w有写的权限,-x有执行的权限(文件权限判断) -f文件存在并且是一个常规文件,-e文件存在,-d文件存在并且是一个目录(文件类型判断)流程控制 case语句 123456789101112131415#!/bin/bash# 接收第一个参数case $1 in"1") echo "1"# 结束当前分支;;"2") echo "2";;*) echo "other";;# 结束`case`语句esac for语句 1234567891011121314151617181920#!/bin/bash# $*一次性获取所有参数for i in "$*"do echo "$i"done# $@分别获取所有参数for j in "$@"do echo "$j"done# 累加1-100s=0for((i=1; i&lt;=100; i++))do s=$[$s+$i]doneecho $s while语句 12345678910#!/bin/bash# 累加1-100s=0i=0while [ $i -le 100 ] do s=$[$s+$i] i=$[$i+1]doneecho $s read读取控制台输入123456789#!/bin/bash# -p接收输入参数,-t指定等待输入时间(秒)read -p "input your name " NAME1echo $NAME1# 3秒后不输入NAME2为空read -t 3 -p "input your name " NAME2echo $NAME2 系统函数 basename(去除路径/(包含/本身)和前面的字符) 1234#!/bin/bashstr=`basename /home/basename.sh`# 输出basename.shecho $str dirname(去除文件本身,相当于获取绝对路径) 1234#!/bin/bashstr=`basename /home/basename.sh`# 输出/homeecho $str 自定义函数123456789101112#!/bin/bash# 计算输入参数的和# 1.必须在调用之前先声明,(shell脚本是逐行运行,不会像java一样先编译)# 2.函数返回值,只能通过$?系统变量获得,可以显示加return返回,如果不加将以最后一条命令运行结果作为返回值(return后跟数值n(0-255))function sum()&#123; s=0 s=$[$1+$2] echo $s&#125;read -p "Plase input the number1:" n1read -p "Plase input the number2:" n2sum $n1 $n2]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux常用命令]]></title>
    <url>%2F2018%2F12%2F25%2FLinux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[帮助命令man获得帮助信息help获得shell内置命令的帮助信息 常用快捷键-ctrl + c停止进程-ctrl + i清屏-ctrl + q退出-table自动补全-上下键查找使用过的命令 文件命令 pwd查看当前目录的绝对路径 ls列出目录内容 ls -a列出目录内容,连同隐藏(.开头的文件)一起列出 ll列出目录内容(包含属性和权限信息) ls -al列出全部目录内容(包含隐藏文件,属性和权限信息) mkdir创建目录 mkdir -p创建多层目录 touch创建空文件 cd切换目录 cd ~切换到用户根目录 cd -切换到上次所在目录 cd ..切换到上级目录 cd -P跳转到实际物理路径,而非快捷方式路径 cp复制文件或目录 rmdir删除空目录 rm删除文件 rm -rf递归删除文件或目录 cp复制文件或目录 cp -r递归复制 mv移动文件或重命名文件 mv -t递归移动文件 cat查看文件-n列出行号(从第一行开始) tac查看文件-n列出行号(从最后一行开始) more查看文件(一页一页展示,空格或=或ctrl + f下一页,ctrl + b上一页,n显示行号) less查看文件(pageup + pagedown翻页,q:退出,/或?搜索,n或N向上/向下查找搜索词语) head -n 行数查看指定行数的文件内容 tail -n 行数查看文件内容,只看尾巴几行,-f实时追踪该文档的所有更新 &gt;覆盖写 &gt;&gt;追加写 echo输出变量 ln -s 软链接名称 链接目录创建软链接(相当于windows快捷方式) cd -P进入软链接实际目录 history查看命令行历史 vi编辑命令 一般模式 yy复制光标当前一行 y数字y复制一段(从第几行到第几行) p箭头移动到目的行粘贴 u撤销上一步 dd删除光标当前行 d数字行d删除光标之后多少行(包含光标所在行) x删除一个字母,相当于del X删除一个字母,相当于Backspace yw复制一个词 dw删除一个词 shift + ^移动到行头 shift + $移动到行尾 数字 + shift + g移动到目标行 1 + shift + g移动到页头 shift + g移动到页尾 编辑模式 i当前光标前 a当前光标后 o当前光标的下一行 Esc退出编辑模式 指令模式 :后输入(组合使用) w保存 q退出 !强制 n后输入(组合使用) /查找词语,查找之后n查找下一个,shift + n查找上一个 ?查找词语,查找之后n查找上一个,shift + n查找下一个 时间日期 date显示当前时间 date &quot;+%Y-%m-%d %H:%M:%S&quot;按特定格式显示当前时间 date -d &quot;next day&quot;显示明天时间 date -d &quot;yesterday&quot;显示昨天时间 date -d &quot;next week&quot;显示下周时间 date -d &quot;next monday&quot;显示下周一时间 date -s &quot;2018-12-12 00:00:00&quot;设置系统时间 cal查看当前月日历 cal -3查看最近三个月的日历 cal 2018查看年份日历 用户管理 useradd添加新用户 passwd设置密码 id判断用户是否存在 su切换用户 userdel删除用户但保存用户目录 userdel -r删除用户和用户目录 who查看登录用户信息 whoami显示当前使用的用户名称 who am i显示登录用户名称 usermod修改用户-g 组名 用户名 赋予普通用户root权限(如us)12345vi /etc/sudoers,root下添加一行如下##Allow root to run any commands anywhereroot ALL=(ALL) ALLus ALL=(ALL) ALL保存后su - us输入密码登录即可获取root权限 用户组管理 groupadd新增组 groupdel删除组 groupmod修改组-n 新组名 老组名 cat /etc/group查看创建了哪些组 文件权限 -rw-r--r.1 root root 12月12 00:00 file.txt -drwxr-xr-x.2 root root 4096 12月12 00:00 file.txt 整体描述 字符 含义 文件权限 第1位- 文件 文件权限 第1位d 文件夹 用户主权限 第2-4位r 读 用户主权限 第2-4位w 写 用户主权限 第2-4位x 执行 用户主权限 第2-4位- 没有权限 用户组权限 第5-7位r 读 用户组权限 第5-7位w 写 用户组权限 第5-7位x 执行 用户组权限 第5-7位- 没有权限 其他用户权限 第8-10位r 读 其他用户权限 第8-10位w 写 其他用户权限 第8-10位x 执行 其他用户权限 第8-10位- 没有权限 链接数 第11位2 链接数 文件拥有者 第12位root 文件拥有者 用户组 第13位root 用户组 文件大小 第14位4096 文件大小 创建时间 第15位12月12 00:00 创建时间 文件名称 第16位file.txt 文件名称 chmod改变文件权限 字符方式 chmod u+x对用户设置执行权限 chmod g-w对用户组设置只读权限 chmod o+w对其他用户设置写权限 chmod a+x对所有人设置执行权限 数字方式 rwx对应111二进制,十进制表示为7 111 = 7,110 = 6,100 = 4,1代表有权限,0代表没有权限 chmod第一位数字表示用户权限,第二位数字表示用户组权限,第三位数字表示其他用户权限(十进制) chmod 777对所有人设置读写和执行权限 chmod 700对用户设置读写和执行权限 chmod 200对用户设置写权限 chmod 660对用户和用户组设置读和执行权限 chown root改变文件所有者为root(root用户操作) chgrp root改变文件所有组为root(root用户操作) 磁盘分区 fdisl -l查看分区详情(root用户操作) df -h查看硬盘详情 mount/umount挂载/卸载 mount -t iso9660 -o rw /dev/cdrom /mnt/cdrom挂载iso镜像到指定目录 -t表示输入,iso9960表示类型,-o表示输出,rw表示读写,文件目录,挂载目录 umount /mnt/cdrom卸载 搜索查找find查找文件或目录find /home -name &quot;*.txt&quot;查找home目录下后缀为.txt的文件find /home -user root查找home目录下所属root用户的文件find /home -size +10查找home目录下大于10的文件(+n大于,-n小于,n等于)grep输出文件内搜索字符串匹配的行ls -l | grep ll.txt查找当前目录下的ll.txt文件(-n输出行数)which查找命令所在目录which ls查找ls命令所在目录 进程线程 ps -aux查看系统中所有进程 top查看系统健康状态(-d设置刷新秒数,q退出) pstree查看进程树(-u显示进程所属用户,-p显示进程id号) kill -9 pid立即杀死进程 netstat -anp显示网络统计信息 压缩解压缩 gzip压缩文件(只能压缩单独一个文件,不保留源文件) gunzip解压缩文件(只能解压单独一个文件,不保留源文件) zip demo a.txt b.txt压缩文件(可以压缩多个文件,保留源文件) unzip demo.zip解压缩文件(可以解压多个文件,保留源文件) tar -zcvf demo.tar.gz a.txt b.txt压缩文件 tar -zvxf demo.tar.gz压缩到当前目录 tar -zvxf demo.tar.gz -C /home压缩到指定目录 -c产生.tar打包文件,-v显示详细信息,-f指定压缩后的文件名,-z打包同时压缩,-x解压.tar文件 后台服务管理 service network status查看指定服务状态 service network stop停止指定服务 service network start启动指定服务 service network restart重启指定服务 service --status -all查看系统中的所有后台服务 chkconfig查看所有服务器自启配置 chkconfig iptables off关闭指定服务的自动启动 chkconfig iptables on开启指定服务的自动启动 系统定时任务 crontab -e编辑crontab定时任务 crontab -l查询crontab定时任务 crontab -r删除当前用户的所有crontab定时任务 * * * * * echo &quot;hello&quot; &gt;&gt; /home/hello.txt执行定时任务 字符 含义 范围 第1个* 一天当中的第几分钟 0-59 第2个* 一天当中的第几小时 0-23 第3个* 一个月当中的第几天 1-31 第4个* 一年当中的第几月 1-12 第5个* 一周当中的星期几 0-7(0和7都代表星期日) 特殊符号 含义 * 代表任何时间,比如第一个“*”就代表一小时中每分钟都执行一次的意思 , 代表不连续的时间,比如“0 8,12,16 * 命令”，就代表在每天的8点0分，12点0分，16点0分都执行一次命令 - 代表连续的时间范围。比如“0 5 1-6命令”，代表在周一到周六的凌晨5点0分执行命令 */n 代表每隔多久执行一次。比如“/10 * 命令”，代表每隔10分钟就执行一遍命令 时间 特定时间执行命令 45 22 * * * 在22点45分执行命令 0 17 * * 1 每周1 的17点0分执行命令 0 5 1,15 * * 每月1号和15号的凌晨5点0分执行命令 40 4 * * 1-5 每周一到周五的凌晨4点40分执行命令 */10 4 * * * 每天的凌晨4点，每隔10分钟执行一次命令 0 0 1,15 * 1 每月1号和15号，每周1的0点0分都会执行命令。注意：星期几和几号最好不要同时出现，因为他们定义的都是天。非常容易让管理员混乱 rpm rpm -qa查询所安装的所有软件包 rpm -e firefox-45.0.1-1.el6.centos.x86_64卸载软件包 rpm -e --nodeps firefox-45.0.1-1.el6.centos.x86_64卸载软件包(不检测依赖) rpm –ivh firefox-45.0.1-1.el6.centos.x86_64安装软件包 rpm –ivh --nodeps firefox-45.0.1-1.el6.centos.x86_64安装软件包(不检测依赖) -i安装,-v显示详细信息,-h显示进度条,--nodeps不检测依赖进度]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux基础配置]]></title>
    <url>%2F2018%2F12%2F24%2FLinux%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[国内Centos镜像 网易镜像 搜狐镜像 VmWare破解密匙1234MA491-6NL5Q-AZAM0-ZH0N2-AAJ5A5A6F6-88247-XZH59-HL0Q6-8CD2VHF6QX-20187-2Z391-522NH-9AELT5F29M-48312-8ZDF9-A8A5K-2AM0Z Linux目录结构123456789101112131415161718192021/bin：是Binary的缩写，这个目录存放着系统必备执行命令/boot：这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件，自己的安装别放这里/dev：Device(设备)的缩写，该目录下存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。/etc：所有的系统管理所需要的配置文件和子目录。/home：存放普通用户的主目录，在Linux中每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。/lib：系统开机所需要最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。/lost+found：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。/media：linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。/misc: 该目录可以用来存放杂项文件或目录，即那些用途或含义不明确的文件或目录可以存放在该目录下。/mnt：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。/net 存放着和网络相关的一些文件./opt：这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。/proc：这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。/root：该目录为系统管理员，也称作超级权限者的用户主目录。/sbin：s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。/selinux：这个目录是Redhat/CentOS所特有的目录，Selinux是一个安全机制，类似于windows的防火墙/srv：service缩写，该目录存放一些服务启动之后需要提取的数据。/sys： 这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。/tmp：这个目录是用来存放一些临时文件的。/usr： 这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与windows下的program files目录。/var：这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。 配置静态ip和网络 编辑网卡配置 vi /etc/sysconfig/network-scripts/ifcfg-eth0 ip随意,和网关在同一网段即可,主要编辑ONBOOT,BOOTPROTO,IPADDR,GATEWAR,DNS1 1234567891011DEVICE=eth0HWADDR=00:0C:29:5D:7B:D1TYPE=EthernetUUID=7c705bcf-883f-4841-a374-40d41be299c0ONBOOT=yesNM_CONTROLLED=yesBOOTPROTO=staticIPADDR=192.168.1.10GATEWAY=192.168.1.2DNS1=192.168.1.2 重启网络服务 service network restart 配置主机名称 hostname查看主机名称 hostname name临时修改主机名称(系统重启后失效) vi /etc/sysconfig/network编辑HOSTNAME master永久修改主机名称(主机名称不要带有_) vi /etc/hosts编辑192.168.1.10 master配置主机名称映射(主机名称映射到对应ip) 配置防火墙 service iptables status查看防火墙状态 service iptables stop临时关闭防火墙(系统重启后再次开启) chkconfig iptables --list查看防火墙状态 chkconfig iptables off关闭防火墙开机启动 chkconfig iptables on开启防火墙开机启动12345678Linux系统有7个运行级别(runlevel)运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登陆运行级别2：多用户状态(没有NFS)运行级别3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式运行级别4：系统未使用，保留运行级别5：X11控制台，登陆后进入图形GUI模式运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动 关机重启 正确的关机流程为:sync &gt; shutdown &gt; reboot &gt; halt sync数据由内存同步到硬盘中 shutdown[选项]时间-h关机,-r重启(shutdown -r 1 &quot;1 分钟后重启&quot;) halt关闭系统,等同于shutdown –h now和poweroff reboot重启,等同于shutdown –h now 关机或重启先执行sync持久化内存数据 配置中文编码 查看编码cat /etc/sysconfig/i18n 修改编码以root用户编辑/etc/sysconfig/i18n 安装系统为中文系统,修改LANG=&quot;zh_CN.UTF-8&quot; 安装系统为英文系统，则修改LANG=&quot;en_US.UTF-8&quot; 使用xShell或其它工具连接,可以修改终端显示编码为utf-8 配置yum仓库yum命令 yum install -y httpd安装httpd并确认安装 yum list列出所有可用的package和package组 yum clean all清除所有缓冲数据 yum deplist httpd功能描述：列出一个包所有依赖的包 yum remove httpd删除httpd配置国内仓库镜像(以Centos6为例) 国内镜像地址下载CentOS5或CentOS6或CentOS7 mv CentOS6-Base-163.repo /etc/yum.repos.d/移动文件到/etc/yum.repos.d目录 mv CentOS6-Base-163.repo CentOS-Base.rep用CentOS6-Base-163.repo替换CentOS-Base.rep cd /etc/yum.repos.d/,cp CentOS-Base.repo CentOS-Base.repo.bak备份原有的yum源配置文件 vi CentOS-Base.repo配置 1234name=CentOS-$releasever - Base - 163.combaseurl=http://mirrors.163.com/centos/$releasever/os/$basearch/gpgcheck=1gpgkey=http://mirrors.centos.org/centos/RPM-GPG-KEY-CentOS-6 yum clean all,yum makecache依次执行完成安装 配置本地仓库镜像 准备一台Linux服务器,版本CentOS-6.8-x86_64-bin-DVD1.iso,配置好服务器ip mkdir /mnt/cdrom,mount -t iso9660 /dev/cdrom /mnt/cdrom将CentOS-6.8-x86_64-bin-DVD1.iso镜像挂载到/mnt/cdrom目录 cd /etc/yum.repos.d/,cp CentOS-Base.repo CentOS-Base.repo.bak备份原有的yum源配置文件 vi CentOS-Base.repo编辑CentOS-Base.repo文件 1234567[base]# 配置本地镜像仓库name=CentOS-Localbaseurl=file:///var/isogpgcheck=1enabled=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6 yum clean all清除yum缓冲 yum repolist列出可用的yum源 yum install -y httpd安装相应的软件 yum.repos.d]#service httpd start开启httpd使用浏览器访问访问地址,以实际ip为准如果访问不通,检查防火墙是否开启了80端口或关闭防火墙 cp -r /mnt/cdrom/ /var/www/html/CentOS将yum源配置到httpd(Apache Server)中，其他的服务器即可通过网络访问这个内网中的yum源了 umount /mnt/cdrom取消先前挂载的镜像 http://192.168.11.101/CentOS/浏览器中访问 cd /etc/yum.repos.d/,cp CentOS-Base.repo CentOS-Base.repo.bak备份使用机器上的yum源 vi CentOS-Base.repo让其他需要安装rpm包的服务器指向这个yum源 123456# 配置使用机器[base]name=CentOS-hadoop101baseurl=http://192.168.11.101/CentOSgpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6 yum clean all,yum repolist使用机器上执行更新配置]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux镜像&VmWare密匙]]></title>
    <url>%2F2018%2F12%2F23%2FLinux%E9%95%9C%E5%83%8F%26VmWare%E5%AF%86%E5%8C%99%2F</url>
    <content type="text"><![CDATA[国内Centos镜像 网易镜像 搜狐镜像 - VmWare破解密匙1234MA491-6NL5Q-AZAM0-ZH0N2-AAJ5A5A6F6-88247-XZH59-HL0Q6-8CD2VHF6QX-20187-2Z391-522NH-9AELT5F29M-48312-8ZDF9-A8A5K-2AM0Z]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown基本语法]]></title>
    <url>%2F2018%2F12%2F20%2FMarkdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[标题1234# 一级标题## 二级标题### 三级标题...以此类推最多六级 一级标题二级标题三级标题 列表123- 列表1- 列表2- 列表3 列表1 列表2子列表1子列表2 列表3 链接1[链接](https://github.com/2500639734) 链接 图片1![图片](https://www.baidu.com/img/baidu_jgylogo3.gif) 斜体1*斜体* 斜体 粗体1**粗体** 粗体 代码片段1234public static void main(String[] arrs)&#123; System.out.println("单行代码左右分别使用一个`符号包裹"); System.out.println("多行上下分别使用三个```符号包裹");&#125; 引用1&gt; 引用 引用 分割线1---或者***]]></content>
      <categories>
        <category>写作</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
</search>
